import os
import json
from datetime import datetime
import config.settings as settings

TIMELINE_DIR = None
TIMELINE_JSON = None
TIMELINE_HTML_MATRIX_CLEAN = None

def _init_paths():
    global TIMELINE_DIR, TIMELINE_JSON, TIMELINE_HTML_MATRIX_CLEAN
    if TIMELINE_DIR is None:
        TIMELINE_DIR = os.path.join(getattr(settings, 'LOG_FOLDER', '.'), 'timeline')
    if TIMELINE_JSON is None:
        TIMELINE_JSON = os.path.join(TIMELINE_DIR, 'events_matrix.json')
    if TIMELINE_HTML_MATRIX_CLEAN is None:
        TIMELINE_HTML_MATRIX_CLEAN = os.path.join(TIMELINE_DIR, 'index2.html')
    os.makedirs(TIMELINE_DIR, exist_ok=True)


def _load_events():
    _init_paths()
    if not os.path.exists(TIMELINE_JSON):
        return []
    try:
        with open(TIMELINE_JSON, 'r', encoding='utf-8') as f:
            data = json.load(f)
            if isinstance(data, list):
                return data
            return []
    except Exception:
        return []


def _save_events(events):
    _init_paths()
    try:
        with open(TIMELINE_JSON, 'w', encoding='utf-8') as f:
            json.dump(events, f, ensure_ascii=False, indent=2)
    except Exception:
        pass


def _group_diffs_by_address(diffs: list):
    out = {}
    for d in (diffs or []):
        addr = d.get('address') or ''
        out.setdefault(addr, []).append(d)
    return out

def export_event(event: dict):
    """
    Append a timeline event to events.json and regenerate index.html.
    Expected keys: timestamp(str), file(str), filename(str), worksheet(str or 'all'),
                   changes(int), author(str), event_number(int or None),
                   snapshot_path(str or None), per_event_path(str or None)
    """
    try:
        events = _load_events()
        # Normalize and enrich
        evt = dict(event or {})
        if not evt.get('timestamp'):
            evt['timestamp'] = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
        evt['file'] = os.path.abspath(evt.get('file') or evt.get('file_path') or evt.get('filename') or '')
        evt['filename'] = os.path.basename(evt.get('file') or '')
        # Optional: attach limited diffs for file-centric view
        if evt.get('diffs') is not None:
            try:
                # 也預先附上按 Address 聚合的視圖資料（供前端切換）
                evt['diffs_by_address'] = _group_diffs_by_address(evt.get('diffs') or [])
            except Exception:
                pass
        # 輕量去重：以 (file, event_number, timestamp) 為簽名
        sig = (evt.get('file',''), evt.get('event_number',''), evt.get('timestamp',''))
        exists = any((e.get('file',''), e.get('event_number',''), e.get('timestamp','')) == sig for e in events)
        if not exists:
            events.append(evt)
        # Keep a reasonable size (e.g., last 20000)
        if len(events) > 20000:
            events = events[-20000:]
        _save_events(events)
        generate_html(events)
        # Debug paths
        try:
            # 總是顯示 HTML 路徑訊息，方便用戶找到文件
            print(f"[timeline-html] HTML 已生成: {TIMELINE_HTML}")
            if getattr(settings, 'SHOW_DEBUG_MESSAGES', False):
                try:
                    from utils.debug import debug_print
                    debug_print('timeline-html', {
                        'dir': TIMELINE_DIR,
                        'json': TIMELINE_JSON,
                        'html': TIMELINE_HTML,
                        'events': len(events),
                        'last_file': evt.get('file','')
                    })
                except Exception:
                    print(f"[timeline-html] dir={TIMELINE_DIR} json={TIMELINE_JSON} html={TIMELINE_HTML} events={len(events)} last_file={evt.get('file','')}")
        except Exception:
            pass
    except Exception:
        # timeline failure should not affect main flow
        pass


def generate_html(events=None, output_path=None, title_suffix=""):
    """Write a static HTML (self-contained) that lists events with simple filtering."""
    try:
        _init_paths()
        if events is None:
            events = _load_events()
        # Filter display: drop no-change events when TIMELINE_RECORD_NO_CHANGE is False
        try:
            if not getattr(settings, 'TIMELINE_RECORD_NO_CHANGE', False):
                before = len(events)
                events = [e for e in (events or []) if int(e.get('changes', 0) or 0) != 0]
                removed = before - len(events)
                if removed and getattr(settings, 'SHOW_DEBUG_MESSAGES', False):
                    print(f"[timeline] filtered no-change events (display only): removed={removed} total_now={len(events)}")
        except Exception:
            pass
        # Latest first
        try:
            events = sorted(events, key=lambda e: e.get('timestamp', ''), reverse=True)
        except Exception:
            pass
        # Minimal self-contained HTML + vanilla JS (no CDN)
        html = []
        html.append('<!DOCTYPE html>')
        html.append('<html lang="zh-Hant">')
        html.append('<head><meta charset="utf-8"/>')
        html.append('<title>Excel Timeline - Matrix風格</title>')
        html.append('<style>')
        html.append('  body{font-family:Consolas,Monaco,Courier New,monospace;margin:16px;background:#000;color:#00ff41;text-shadow:0 0 3px #00ff41;}')
        html.append('  table{border-collapse:collapse;width:100%;border:1px solid #00ff41;background:#000;}')
        html.append('  th,td{border:1px solid #00ff41;padding:6px;word-break:break-all;overflow:hidden;min-width:60px;color:#00ff41;text-shadow:0 0 2px #00ff41;}')
        html.append('  th{background:#001100;position:sticky;top:0;cursor:default;}')
        html.append('  th:hover{background:#002200;}')
        html.append('  .muted{color:#006600;font-size:12px}')
        html.append('  input{padding:6px;margin:4px 8px 12px 0;background:#000;color:#00ff41;border:1px solid #00ff41;text-shadow:0 0 3px #00ff41;}')
        html.append('  .formula-cell{color:#00ddaa;}')
        html.append('  .formula-diff-deleted{background-color:rgba(255,68,68,0.2);text-decoration:line-through;color:#ff4444;}')
        html.append('  .formula-diff-added{background-color:rgba(0,255,65,0.2);color:#00ff88;}')
        html.append('  .formula-diff-unchanged{color:#888888;}')
        html.append('  button{padding:5px 10px;margin-right:5px;cursor:pointer;background:#000;color:#00ff41;border:1px solid #00ff41;text-shadow:0 0 3px #00ff41;}')
        html.append('  .author-filter, .worksheet-filter{margin:5px 0;}')
        html.append('  .author-tag, .worksheet-tag{display:inline-block;padding:3px 6px;margin:2px;background:rgba(0,255,65,0.1);border:1px solid #00ff41;border-radius:3px;cursor:pointer;color:#00ff41;}')
        html.append('  .author-highlight{background-color:rgba(255,255,0,0.2);}')
        html.append('  .controls{margin:10px 0;padding:10px;background:#000;border:1px solid #00ff41;border-radius:4px;}')
        html.append('  .column-toggle{margin-right:10px;white-space:nowrap;color:#00ff41;}')
        html.append('  .summary-box{margin:10px 0;padding:10px;background:#000;border:1px solid #00ff41;border-radius:4px;color:#00ff41;}')
        html.append('  .export-btn{background:#000;color:#00ff41;border:1px solid #00ff41;padding:6px 12px;border-radius:4px;}')
        html.append('  .filters-container{display:flex;flex-direction:column;gap:5px;}')
        html.append('  /* 動態寬度將由 JavaScript 計算 */')
        html.append('  .col-time {min-width:120px; max-width:150px;}')
        html.append('  .col-author {min-width:60px; max-width:120px;}')
        html.append('  .col-worksheet {min-width:60px; max-width:100px;}')
        html.append('  .col-address {min-width:50px; max-width:80px;}')
        html.append('  .col-oldvalue, .col-newvalue, .col-valuediff {min-width:80px; max-width:200px; white-space: normal; overflow-wrap: anywhere; word-break: break-word;}')
        html.append('  .col-oldformula, .col-newformula, .col-formuladiff {min-width:250px; width:250px; max-width:250px;}')
        html.append('  .diff-table{table-layout:fixed;}')
        html.append('  .diff-table td{overflow:hidden;text-overflow:ellipsis;}')
        html.append('  .col-oldformula, .col-newformula, .col-formuladiff {white-space: pre-wrap; overflow-wrap: anywhere; word-break: break-word; overflow: visible; text-overflow: initial;}')
        html.append('  /* 自適應列寬度樣式 */')
        html.append('  table.auto-size-columns .col-worksheet,')
        html.append('  table.auto-size-columns .col-address,')
        html.append('  table.auto-size-columns .col-event,')
        html.append('  table.auto-size-columns .col-time,')
        html.append('  table.auto-size-columns .col-author {')
        html.append('    white-space: nowrap;')
        html.append('    max-width: none;')
        html.append('  }')
        html.append('  /* 公式列總是換行，避免表格過寬 */')
        html.append('  .col-oldformula, .col-newformula, .col-formuladiff {')
        html.append('    word-break: break-word;')
        html.append('    min-width: 150px;')
        html.append('    max-width: 350px;')
        html.append('  }')
        html.append('  /* 值列總是換行，但給予適當空間 */')
        html.append('  .col-oldvalue, .col-newvalue {')
        html.append('    word-break: break-word;')
        html.append('    min-width: 120px;')
        html.append('    max-width: 300px;')
        html.append('  }')
        html.append('  ')
        html.append('  /* 明亮主題樣式 */')
        html.append('  body.light-theme {')
        html.append('    background: #ffffff !important;')
        html.append('    color: #333333 !important;')
        html.append('    text-shadow: none !important;')
        html.append('  }')
        html.append('  ')
        html.append('  body.light-theme h2 {')
        html.append('    color: #2c3e50 !important;')
        html.append('    text-shadow: none !important;')
        html.append('  }')
        html.append('  ')
        html.append('  body.light-theme table {')
        html.append('    border: 1px solid #ddd;')
        html.append('    background: #ffffff;')
        html.append('  }')
        html.append('  ')
        html.append('  body.light-theme th,')
        html.append('  body.light-theme td {')
        html.append('    border: 1px solid #ddd;')
        html.append('    color: #333333;')
        html.append('    text-shadow: none;')
        html.append('  }')
        html.append('  ')
        html.append('  body.light-theme th {')
        html.append('    background: #f8f9fa;')
        html.append('  }')
        html.append('  ')
        html.append('  body.light-theme th:hover {')
        html.append('    background: #e9ecef;')
        html.append('  }')
        html.append('  ')
        html.append('  body.light-theme .muted {')
        html.append('    color: #6c757d;')
        html.append('  }')
        html.append('  ')
        html.append('  body.light-theme input {')
        html.append('    background: #ffffff !important;')
        html.append('    color: #333333 !important;')
        html.append('    border: 1px solid #ced4da !important;')
        html.append('    text-shadow: none !important;')
        html.append('  }')
        html.append('  ')
        html.append('  body.light-theme button {')
        html.append('    background: #ffffff !important;')
        html.append('    color: #333333 !important;')
        html.append('    border: 1px solid #ced4da !important;')
        html.append('    text-shadow: none !important;')
        html.append('  }')
        html.append('  ')
        html.append('  body.light-theme button:hover {')
        html.append('    background: #f8f9fa;')
        html.append('  }')
        html.append('  ')
        html.append('  body.light-theme .author-tag,')
        html.append('  body.light-theme .worksheet-tag {')
        html.append('    background: #e9ecef;')
        html.append('    border: 1px solid #ced4da;')
        html.append('    color: #333333;')
        html.append('  }')
        html.append('  ')
        html.append('  body.light-theme .controls,')
        html.append('  body.light-theme .summary-box {')
        html.append('    background: #ffffff !important;')
        html.append('    border: 1px solid #dee2e6 !important;')
        html.append('    color: #333333 !important;')
        html.append('  }')
        html.append('  ')
        html.append('  body.light-theme .column-toggle {')
        html.append('    color: #333333;')
        html.append('  }')
        html.append('  ')
        html.append('  /* 公式差異在白色主題下保持原有顏色 */')
        html.append('  body.light-theme .formula-diff-deleted {')
        html.append('    background-color: rgba(255,68,68,0.2);')
        html.append('    color: #dc3545;')
        html.append('  }')
        html.append('  ')
        html.append('  body.light-theme .formula-diff-added {')
        html.append('    background-color: rgba(40,167,69,0.2);')
        html.append('    color: #28a745;')
        html.append('  }')
        html.append('  ')
        html.append('  body.light-theme .formula-diff-unchanged {')
        html.append('    color: #6c757d;')
        html.append('  }')
        html.append('  ')
        html.append('  body.light-theme .author-highlight {')
        html.append('    background-color: rgba(255,193,7,0.3);')
        html.append('  }')
        html.append('  ')
        html.append('  /* 確保所有內聯樣式都被覆蓋 */')
        html.append('  body.light-theme * {')
        html.append('    border-color: #dee2e6 !important;')
        html.append('  }')
        html.append('  ')
        html.append('  body.light-theme table,')
        html.append('  body.light-theme th,')
        html.append('  body.light-theme td {')
        html.append('    background: #ffffff !important;')
        html.append('    color: #333333 !important;')
        html.append('  }')
        html.append('  ')
        html.append('  body.light-theme .muted {')
        html.append('    color: #6c757d !important;')
        html.append('  }')
        html.append('  ')
        html.append('  /* 特別處理內聯樣式的輸入框 */')
        html.append('  body.light-theme input[style*="background"] {')
        html.append('    background: #ffffff !important;')
        html.append('    color: #333333 !important;')
        html.append('    border: 1px solid #ced4da !important;')
        html.append('  }')
        html.append('</style>')
        html.append('</head><body>')
        main_title = "Excel Timeline" + title_suffix
        html.append(f'<h2 style="color:#00ff41;text-shadow:0 0 10px #00ff41;">{main_title}</h2>')
        html.append('<div class="muted">提示：點檔名可展開「檔案詳情視圖」（提供「依事件時間 / 依 Address / 依作者」三種檢視）。</div>')
        html.append('<div style="display:flex;gap:15px;align-items:center;margin-bottom:10px;">')
        html.append('  <div>快速篩選：<input id="q" placeholder="關鍵字（檔名/路徑/作者/工作表）" style="width:360px"/></div>')
        html.append('  <button id="themeToggle" onclick="toggleTheme()" style="padding:8px 16px;background:#000;color:#00ff41;border:1px solid #00ff41;border-radius:4px;cursor:pointer;">🌞 明亮模式</button>')
        html.append('</div>')
        html.append('<div class="controls" style="margin-top:8px;display:flex;gap:12px;align-items:center;flex-wrap:wrap">')
        html.append('  <div style="display:flex;gap:6px;align-items:center">')
        html.append('    <label>顯示小數位數：</label>')
        html.append('    <input id="decimals" type="number" min="0" max="10" step="1" placeholder="auto" style="width:90px;background:#000;color:#00ff41;border:1px solid #00ff41;">')
        html.append('    <small class="muted">預設 auto（不四捨五入）</small>')
        html.append('  </div>')
        html.append('  <div style="display:flex;gap:6px;align-items:center">')
        html.append('    <label>值欄寬(px)：</label>')
        html.append('    <input id="valWidth" type="number" min="60" max="600" step="10" placeholder="例如 220" style="width:100px;background:#000;color:#00ff41;border:1px solid #00ff41;">')
        html.append('  </div>')
        html.append('  <div style="display:flex;gap:6px;align-items:center">')
        html.append('    <label>公式欄寬(px)：</label>')
        html.append('    <input id="formWidth" type="number" min="120" max="800" step="10" placeholder="例如 280" style="width:100px;background:#000;color:#00ff41;border:1px solid #00ff41;">')
        html.append('  </div>')
        html.append('  <div style="display:flex;gap:6px;align-items:center">')
        html.append('    <label>時間(px)：</label>')
        html.append('    <input id="timeWidth" type="number" min="60" max="600" step="10" placeholder="auto" style="width:90px;background:#000;color:#00ff41;border:1px solid #00ff41;">')
        html.append('    <small class="muted">預設 <span id="defTime">auto</span> px</small>')
        html.append('  </div>')
        html.append('  <div style="display:flex;gap:6px;align-items:center">')
        html.append('    <label>作者(px)：</label>')
        html.append('    <input id="authorWidth" type="number" min="40" max="400" step="10" placeholder="auto" style="width:90px;background:#000;color:#00ff41;border:1px solid #00ff41;">')
        html.append('    <small class="muted">預設 <span id="defAuthor">auto</span> px</small>')
        html.append('  </div>')
        html.append('  <div style="display:flex;gap:6px;align-items:center">')
        html.append('    <label>工作表(px)：</label>')
        html.append('    <input id="wsWidth" type="number" min="40" max="400" step="10" placeholder="auto" style="width:90px;background:#000;color:#00ff41;border:1px solid #00ff41;">')
        html.append('    <small class="muted">預設 <span id="defWS">auto</span> px</small>')
        html.append('  </div>')
        html.append('  <div style="display:flex;gap:6px;align-items:center">')
        html.append('    <label>位置(px)：</label>')
        html.append('    <input id="addrWidth" type="number" min="40" max="400" step="10" placeholder="auto" style="width:90px;background:#000;color:#00ff41;border:1px solid #00ff41;">')
        html.append('    <small class="muted">預設 <span id="defAddr">auto</span> px</small>')
        html.append('  </div>')
        html.append('  <button id="applyWidths" class="view-btn">套用</button>')
        html.append('  <button id="resetWidths" class="view-btn">重設</button>')
        html.append('</div>')
        html.append('<div id="file-view" style="display:none;margin:12px 0;padding:8px;border:1px solid #00ff41;background:#000;color:#00ff41"></div>')
        html.append('<table id="tbl">')
        html.append('<thead><tr><th>時間</th><th>檔名</th><th>工作表</th><th>變更數</th><th>作者</th><th>事件#</th><th>Baseline</th><th>Current</th><th>快照</th><th>詳表</th><th class="muted">路徑</th></tr></thead>')
        html.append('<tbody>')
        for e in (events or []):
            ts = e.get('timestamp','')
            fn = e.get('filename','')
            ws = e.get('worksheet','') or ''
            ch = e.get('changes','')
            au = e.get('author','') or ''
            ev = e.get('event_number','') or ''
            fp = e.get('file','')
            sp = e.get('snapshot_path') or ''
            pp = e.get('per_event_path') or ''
            sp_link = f'<a href="{sp}" target="_blank">snapshot</a>' if sp else ''
            pp_link = f'<a href="{pp}" target="_blank">per-event</a>' if pp else ''
            bt = e.get('baseline_time','')
            ct = e.get('current_time','')
            html.append(f'<tr data-file="{fp}"><td>{ts}</td><td><a href="#" class="file-link" data-file="{fp}">{fn}</a></td><td>{ws}</td><td>{ch}</td><td>{au}</td><td>{ev}</td><td>{bt}</td><td>{ct}</td><td>{sp_link}</td><td>{pp_link}</td><td class="muted">{fp}</td></tr>')
        html.append('</tbody></table>')
        # 內嵌 events JSON，避免在 JS 字串中處理跳脫/關閉標籤
        try:
            safe_json_tag = json.dumps(events, ensure_ascii=False).replace('</', '<\/')
        except Exception:
            safe_json_tag = '[]'
        html.append('<script id="events-data" type="application/json">'+ safe_json_tag +'</script>')
        html.append('<script>')
        html.append('// 主題切換功能')
        html.append('function toggleTheme() {')
        html.append('  const body = document.body;')
        html.append('  const isLight = body.classList.contains("light-theme");')
        html.append('  ')
        html.append('  if (isLight) {')
        html.append('    body.classList.remove("light-theme");')
        html.append('    localStorage.setItem("timeline_theme", "dark");')
        html.append('    document.getElementById("themeToggle").textContent = "🌞 明亮模式";')
        html.append('  } else {')
        html.append('    body.classList.add("light-theme");')
        html.append('    localStorage.setItem("timeline_theme", "light");')
        html.append('    document.getElementById("themeToggle").textContent = "🌙 深色模式";')
        html.append('  }')
        html.append('}')
        html.append('')
        html.append('// 頁面載入時恢復主題設定')
        html.append('try {')
        html.append('  const savedTheme = localStorage.getItem("timeline_theme");')
        html.append('  if (savedTheme === "light") {')
        html.append('    document.body.classList.add("light-theme");')
        html.append('    document.getElementById("themeToggle").textContent = "🌙 深色模式";')
        html.append('  }')
        html.append('} catch(e) {}')
        html.append('')
        html.append('const q=document.getElementById("q");')
        html.append('q.addEventListener("input",()=>{const v=q.value.toLowerCase();document.querySelectorAll("#tbl tbody tr").forEach(tr=>{tr.style.display=tr.innerText.toLowerCase().includes(v)?"":"none";});});')
        # 從 JSON script tag 讀取事件
        html.append("const data = JSON.parse(document.getElementById('events-data').textContent);")
        html.append('const fileView=document.getElementById("file-view");')
        html.append('function renderFileView(file){')
        html.append('  try {')
        html.append('    const fileView = document.getElementById("file-view");')
        html.append('    if (!fileView) {')
        html.append('      console.error("找不到file-view元素");')
        html.append('      return;')
        html.append('    }')
        html.append('    const evts=data.filter(e=> (e.file||"")==file).sort((a,b)=> (a.timestamp<b.timestamp?1:-1));')
        html.append('    if(!evts.length){fileView.style.display="none";fileView.innerHTML="";return;}')
        html.append('    fileView.style.display="block";')
        html.append('    try{ fileView.setAttribute("data-current-file", file); }catch(e){}')
        html.append('    let html="<div class=\\\"controls\\\"><div><b>檔案：</b>"+file+"</div>";')
        html.append('    html+="<div style=\\\"margin-top:10px\\\"><label><input type=\\\"checkbox\\\" id=\\\"autoSizeColumns\\\" checked> 自適應短欄位寬度</label> <span class=\\\"muted\\\">(僅適用於工作表、位置等短欄位，公式和值欄位總是換行)</span></div>";')
        html.append('  // 找出所有作者和工作表')
        html.append('  const allAuthors = new Set();')
        html.append('  const allWorksheets = new Set();')
        html.append('  const earliestTime = evts[evts.length-1].timestamp;')
        html.append('  const latestTime = evts[0].timestamp;')
        html.append('  let totalChanges = 0;')
        html.append('  evts.forEach(e => {')
        html.append('    if(e.author) allAuthors.add(e.author);')
        html.append('    totalChanges += parseInt(e.changes || 0);')
        html.append('    (e.diffs || []).forEach(d => {')
        html.append('      if(d.worksheet) allWorksheets.add(d.worksheet);')
        html.append('    });')
        html.append('  });')
        html.append('  html+="<div class=\\\"controls\\\"><div><button id=\\\"byTime\\\">依事件時間</button> <button id=\\\"byAddr\\\">依 Address</button> <button id=\\\"byAuthor\\\">依作者</button> <button id=\\\"exportCSV\\\" class=\\\"export-btn\\\">匯出 CSV</button></div>";')
        html.append('  html+="<div class=\\\"column-controls\\\" style=\\\"margin-top:10px\\\">顯示欄位: "+')
        html.append('         "<label class=\\\"column-toggle\\\"><input type=\\\"checkbox\\\" class=\\\"col-toggle\\\" data-col=\\\"time\\\" checked> 時間</label>"+')
        html.append('         "<label class=\\\"column-toggle\\\"><input type=\\\"checkbox\\\" class=\\\"col-toggle\\\" data-col=\\\"author\\\" checked> 作者</label>"+')
        html.append('         "<label class=\\\"column-toggle\\\"><input type=\\\"checkbox\\\" class=\\\"col-toggle\\\" data-col=\\\"worksheet\\\" checked> 工作表</label>"+')
        html.append('         "<label class=\\\"column-toggle\\\"><input type=\\\"checkbox\\\" class=\\\"col-toggle\\\" data-col=\\\"address\\\" checked> 位置</label>"+')
        html.append('         "<label class=\\\"column-toggle\\\"><input type=\\\"checkbox\\\" class=\\\"col-toggle\\\" data-col=\\\"oldvalue\\\" checked> 原始值</label>"+')
        html.append('         "<label class=\\\"column-toggle\\\"><input type=\\\"checkbox\\\" class=\\\"col-toggle\\\" data-col=\\\"newvalue\\\" checked> 變更後值</label>"+')
        html.append('         "<label class=\\\"column-toggle\\\"><input type=\\\"checkbox\\\" class=\\\"col-toggle\\\" data-col=\\\"valuediff\\\" checked> 值差異</label>"+')
        html.append('         "<label class=\\\"column-toggle\\\"><input type=\\\"checkbox\\\" class=\\\"col-toggle\\\" data-col=\\\"oldformula\\\" checked> 原始公式</label>"+')
        html.append('         "<label class=\\\"column-toggle\\\"><input type=\\\"checkbox\\\" class=\\\"col-toggle\\\" data-col=\\\"newformula\\\" checked> 變更後公式</label>"+')
        html.append('         "<label class=\\\"column-toggle\\\"><input type=\\\"checkbox\\\" class=\\\"col-toggle\\\" data-col=\\\"formuladiff\\\" checked> 公式差異比較</label>"+')
        html.append('         "</div>";')
        html.append('  html+="<div class=\\\"filters-container\\\"><div id=\\\"authorFilter\\\" class=\\\"author-filter\\\"></div><div id=\\\"worksheetFilter\\\" class=\\\"worksheet-filter\\\"></div></div>";')
        html.append('  html+="<div id=\\\"summary\\\" class=\\\"summary-box\\\"></div>";')
        html.append('  html+="</div>";')
        html.append('  ')
        html.append('  // 全局函數：處理公式顯示，移除多餘的轉義字符')
        html.append('  function formatFormula(formula) {')
        html.append('    if (formula === undefined || formula === null) return "";')
        html.append('    let str = String(formula);')
        html.append('    // 移除 JSON 轉義字符，讓公式更易讀')
        html.append('    str = str.replace(/\\\\"/g, \'"\');')
        html.append('    str = str.replace(/\\\\\\\\/g, \'\\\\\');')
        html.append('    str = str.replace(/\\\\&/g, "&");')
        html.append('    // 處理 HTML 實體')
        html.append('    str = str.replace(/&/g, "&amp;");')
        html.append('    str = str.replace(/</g, "&lt;");')
        html.append('    str = str.replace(/>/g, "&gt;");')
        html.append('    return str;')
        html.append('  }')
        html.append('  ')
        html.append('  // 全局函數：處理數值顯示，移除不必要的引號')
        html.append('  function formatValue(value) {')
        html.append('    if (value === undefined || value === null) return "";')
        html.append('    ')
        html.append('    // 如果是數字，直接顯示，不加引號')
        html.append('    const num = parseFloat(value);')
        html.append('    if (!isNaN(num)) {')
        html.append('      return roundTo(num).toString();')
        html.append('    }')
        html.append('    ')
        html.append('    // 如果是字串，只有在必要時才加引號（包含空格或特殊字符）')
        html.append('    const str = String(value);')
        html.append('    if (str === "" || /[\\s<>&"\\\'\\\\]/.test(str)) {')
        html.append('      // 需要引號的情況：空字串、包含空格或特殊字符')
        html.append('      return JSON.stringify(str);')
        html.append('    }')
        html.append('    ')
        html.append('    // 普通字串直接顯示')
        html.append('    return str;')
        html.append('  }')
        html.append('  ')
        html.append('  // 全局：小數位設定（localStorage）與四捨五入工具')
        html.append('  const DEC_KEY = "timeline_decimals";')
        html.append('  function getDecimalsSetting(){')
        html.append('    try{ const v = parseInt(localStorage.getItem(DEC_KEY)||"" ); if(!Number.isNaN(v)) return Math.min(Math.max(v,0),10);}catch(e){}')
        html.append('    const inp = document.getElementById("decimals");')
        html.append('    if (inp){ const vv = parseInt(inp.value); if(!Number.isNaN(vv)) return Math.min(Math.max(vv,0),10);}')
        html.append('    return null;')
        html.append('  }')
        html.append('  function roundTo(n){')
        html.append('    const dec = getDecimalsSetting();')
        html.append('    if (dec===null) return n;')
        html.append('    const f = Math.pow(10, dec);')
        html.append('    return Math.round(n * f) / f;')
        html.append('  }')
        html.append('  // 全局函數：比較兩個公式並生成帶有顏色標記的 diff HTML (改進版)')
        html.append('  function formatFormulaDiff(oldFormula, newFormula) {')
        html.append('    const oldStr = formatFormula(oldFormula);')
        html.append('    const newStr = formatFormula(newFormula);')
        html.append('    ')
        html.append('    // 如果兩個公式相同，直接返回')
        html.append('    if (oldStr === newStr) {')
        html.append('      return "<span class=\\"formula-diff-unchanged\\">" + oldStr + "</span>";')
        html.append('    }')
        html.append('    ')
        html.append('    // 檢查是否為數值比較')
        html.append('    const oldNum = parseFloat(oldStr);')
        html.append('    const newNum = parseFloat(newStr);')
        html.append('    ')
        html.append('    if (!isNaN(oldNum) && !isNaN(newNum)) {')
        html.append('      // 數值比較：顯示差值')
        html.append('      const diff = newNum - oldNum;')
        html.append('      let diffStr = "";')
        html.append('      if (diff > 0) {')
        html.append('        diffStr = `<span style="color: #28a745; font-weight: bold;">+${diff.toLocaleString()}</span>`;')
        html.append('      } else if (diff < 0) {')
        html.append('        diffStr = `<span style="color: #dc3545; font-weight: bold;">${diff.toLocaleString()}</span>`;')
        html.append('      } else {')
        html.append('        diffStr = `<span style="color: #6c757d;">0</span>`;')
        html.append('      }')
        html.append('      return `<span class="formula-diff-deleted">${oldStr}</span> → <span class="formula-diff-added">${newStr}</span><small style="margin-left:6px;opacity:.8">(差值: ${diffStr})</small>`;')
        html.append('    }')
        html.append('    ')
        html.append('    // 檢查是否為公式')
        html.append('    const oldIsFormula = oldStr.startsWith("=");')
        html.append('    const newIsFormula = newStr.startsWith("=");')
        html.append('    ')
        html.append('    if (oldIsFormula && newIsFormula) {')
        html.append('      // 公式比較：區塊級別差異')
        html.append('      return formatBlockLevelFormulaDiff(oldStr, newStr);')
        html.append('    } else if (oldIsFormula !== newIsFormula) {')
        html.append('      // 一個是公式一個不是：並列顯示')
        html.append('      return `<span class="formula-diff-deleted">${oldStr}</span> <span class="formula-diff-added">${newStr}</span>`;')
        html.append('    } else {')
        html.append('      // 文字比較：改進的文字差異')
        html.append('      return formatTextDiff(oldStr, newStr);')
        html.append('    }')
        html.append('  }')
        html.append('  ')
        html.append('  // 區塊級別公式差異')
        html.append('  function formatBlockLevelFormulaDiff(oldFormula, newFormula) {')
        html.append('    // 提取主要函數名稱')
        html.append('    const oldFunc = extractMainFunction(oldFormula);')
        html.append('    const newFunc = extractMainFunction(newFormula);')
        html.append('    ')
        html.append('    if (oldFunc !== newFunc) {')
        html.append('      // 不同函數：並列顯示')
        html.append('      return `<span class="formula-diff-deleted">${oldFormula}</span> <span class="formula-diff-added">${newFormula}</span>`;')
        html.append('    }')
        html.append('    ')
        html.append('    // 相同函數：嘗試參數級別比較')
        html.append('    const oldParams = extractFormulaParameters(oldFormula);')
        html.append('    const newParams = extractFormulaParameters(newFormula);')
        html.append('    ')
        html.append('    if (oldParams.length !== newParams.length) {')
        html.append('      // 參數數量不同：並列顯示')
        html.append('      return `<span class="formula-diff-deleted">${oldFormula}</span> <span class="formula-diff-added">${newFormula}</span>`;')
        html.append('    }')
        html.append('    ')
        html.append('    // 參數級別比較')
        html.append('    let result = `=${oldFunc}(`;')
        html.append('    let hasChanges = false;')
        html.append('    ')
        html.append('    for (let i = 0; i < oldParams.length; i++) {')
        html.append('      if (i > 0) result += ", ";')
        html.append('      ')
        html.append('      if (oldParams[i] === newParams[i]) {')
        html.append('        result += `<span class="formula-diff-unchanged">${oldParams[i]}</span>`;')
        html.append('      } else {')
        html.append('        hasChanges = true;')
        html.append('        result += `<span class="formula-diff-deleted">${oldParams[i]}</span><span class="formula-diff-added">${newParams[i]}</span>`;')
        html.append('      }')
        html.append('    }')
        html.append('    ')
        html.append('    result += ")";')
        html.append('    ')
        html.append('    return hasChanges ? result : oldFormula;')
        html.append('  }')
        html.append('  ')
        html.append('  // 提取主要函數名稱')
        html.append('  function extractMainFunction(formula) {')
        html.append('    const match = formula.match(/^=\\s*([A-Z_]+)\\s*\\(/i);')
        html.append('    return match ? match[1].toUpperCase() : "";')
        html.append('  }')
        html.append('  ')
        html.append('  // 提取公式參數')
        html.append('  function extractFormulaParameters(formula) {')
        html.append('    const match = formula.match(/^=\\s*[A-Z_]+\\s*\\((.*)\\)\\s*$/i);')
        html.append('    if (!match) return [];')
        html.append('    ')
        html.append('    const paramStr = match[1];')
        html.append('    if (!paramStr.trim()) return [];')
        html.append('    ')
        html.append('    // 簡單分割（不處理嵌套括號）')
        html.append('    return paramStr.split(",").map(p => p.trim());')
        html.append('  }')
        html.append('  ')
        html.append('  // 改進的文字差異')
        html.append('  function formatTextDiff(oldText, newText) {')
        html.append('    if (oldText === newText) {')
        html.append('      return `<span class="formula-diff-unchanged">${oldText}</span>`;')
        html.append('    }')
        html.append('    ')
        html.append('    // 計算相似度')
        html.append('    const similarity = calculateSimilarity(oldText, newText);')
        html.append('    ')
        html.append('    if (similarity < 0.3) {')
        html.append('      // 差異太大：並列顯示')
        html.append('      return `<span class="formula-diff-deleted">${oldText}</span> <span class="formula-diff-added">${newText}</span>`;')
        html.append('    }')
        html.append('    ')
        html.append('    // 單詞級別差異')
        html.append('    return formatWordLevelDiff(oldText, newText);')
        html.append('  }')
        html.append('  ')
        html.append('  // 計算文字相似度')
        html.append('  function calculateSimilarity(str1, str2) {')
        html.append('    const longer = str1.length > str2.length ? str1 : str2;')
        html.append('    const shorter = str1.length > str2.length ? str2 : str1;')
        html.append('    ')
        html.append('    if (longer.length === 0) return 1.0;')
        html.append('    ')
        html.append('    const editDistance = levenshteinDistance(longer, shorter);')
        html.append('    return (longer.length - editDistance) / longer.length;')
        html.append('  }')
        html.append('  ')
        html.append('  // 計算編輯距離')
        html.append('  function levenshteinDistance(str1, str2) {')
        html.append('    const matrix = [];')
        html.append('    ')
        html.append('    for (let i = 0; i <= str2.length; i++) {')
        html.append('      matrix[i] = [i];')
        html.append('    }')
        html.append('    ')
        html.append('    for (let j = 0; j <= str1.length; j++) {')
        html.append('      matrix[0][j] = j;')
        html.append('    }')
        html.append('    ')
        html.append('    for (let i = 1; i <= str2.length; i++) {')
        html.append('      for (let j = 1; j <= str1.length; j++) {')
        html.append('        if (str2.charAt(i - 1) === str1.charAt(j - 1)) {')
        html.append('          matrix[i][j] = matrix[i - 1][j - 1];')
        html.append('        } else {')
        html.append('          matrix[i][j] = Math.min(')
        html.append('            matrix[i - 1][j - 1] + 1,')
        html.append('            matrix[i][j - 1] + 1,')
        html.append('            matrix[i - 1][j] + 1')
        html.append('          );')
        html.append('        }')
        html.append('      }')
        html.append('    }')
        html.append('    ')
        html.append('    return matrix[str2.length][str1.length];')
        html.append('  }')
        html.append('  ')
        html.append('  // 單詞級別差異')
        html.append('  function formatWordLevelDiff(oldText, newText) {')
        html.append('    const oldWords = oldText.split(/\\s+/);')
        html.append('    const newWords = newText.split(/\\s+/);')
        html.append('    ')
        html.append('    const result = [];')
        html.append('    const maxLen = Math.max(oldWords.length, newWords.length);')
        html.append('    ')
        html.append('    for (let i = 0; i < maxLen; i++) {')
        html.append('      const oldWord = i < oldWords.length ? oldWords[i] : "";')
        html.append('      const newWord = i < newWords.length ? newWords[i] : "";')
        html.append('      ')
        html.append('      if (oldWord === newWord && oldWord !== "") {')
        html.append('        result.push(`<span class="formula-diff-unchanged">${oldWord}</span>`);')
        html.append('      } else {')
        html.append('        if (oldWord !== "") {')
        html.append('          result.push(`<span class="formula-diff-deleted">${oldWord}</span>`);')
        html.append('        }')
        html.append('        if (newWord !== "") {')
        html.append('          result.push(`<span class="formula-diff-added">${newWord}</span>`);')
        html.append('        }')
        html.append('      }')
        html.append('    }')
        html.append('    ')
        html.append('    return result.join(" ");')
        html.append('  }')
        html.append('  ')
        html.append('  // 智能寬度計算函數')
        html.append('  function calculateOptimalWidths(evts) {')
        html.append('    const stats = {')
        html.append('      maxTimeLength: 0,')
        html.append('      maxAuthorLength: 0,')
        html.append('      maxWorksheetLength: 0,')
        html.append('      maxAddressLength: 0,')
        html.append('      maxValueLength: 0,')
        html.append('      maxFormulaLength: 0')
        html.append('    };')
        html.append('    ')
        html.append('    // 分析所有數據找出最大長度')
        html.append('    evts.forEach(e => {')
        html.append('      if (e.timestamp) stats.maxTimeLength = Math.max(stats.maxTimeLength, e.timestamp.length);')
        html.append('      if (e.author) stats.maxAuthorLength = Math.max(stats.maxAuthorLength, e.author.length);')
        html.append('      ')
        html.append('      (e.diffs || []).forEach(d => {')
        html.append('        if (d.worksheet) stats.maxWorksheetLength = Math.max(stats.maxWorksheetLength, d.worksheet.length);')
        html.append('        if (d.address) stats.maxAddressLength = Math.max(stats.maxAddressLength, d.address.length);')
        html.append('        ')
        html.append('        const ov = formatFormula(d.old_value);')
        html.append('        const nv = formatFormula(d.new_value);')
        html.append('        // 只用原始值與變更後值來決定值組欄寬，取二者較長者')
        html.append('        stats.maxValueLength = Math.max(stats.maxValueLength, ov.length, nv.length);')
        html.append('        ')
        html.append('        const oldFormula = formatFormula(d.old_formula);')
        html.append('        const newFormula = formatFormula(d.new_formula);')
        html.append('        stats.maxFormulaLength = Math.max(stats.maxFormulaLength, oldFormula.length, newFormula.length);')
        html.append('      });')
        html.append('    });')
        html.append('    ')
        html.append('    // 計算最佳寬度（以字符數 * 8px 估算）')
        html.append('    const charWidth = 8;')
        html.append('    const padding = 20;')
        html.append('    ')
        html.append('    // 優先保證 formula 欄位空間 - 先計算 formula 需要的最小空間')
        html.append('    const availableWidth = window.innerWidth - 100; // 留一些邊距')
        html.append('    const minFormulaWidth = 250; // 每個 formula 欄位最少 250px')
        html.append('    const totalFormulaWidth = minFormulaWidth * 3; // 三個 formula 欄位')
        html.append('    ')
        html.append('    // 計算其他欄位可用的最大空間')
        html.append('    const remainingForOthers = availableWidth - totalFormulaWidth;')
        html.append('    ')
        html.append('    // 如果空間不夠，壓縮其他欄位到最小值')
        html.append('    const widths = {')
        html.append('      time: remainingForOthers > 400 ? Math.min(Math.max(stats.maxTimeLength * charWidth + padding, 120), 150) : 120,')
        html.append('      author: remainingForOthers > 400 ? Math.min(Math.max(stats.maxAuthorLength * charWidth + padding, 60), 120) : 60,')
        html.append('      worksheet: remainingForOthers > 400 ? Math.min(Math.max(stats.maxWorksheetLength * charWidth + padding, 60), 100) : 60,')
        html.append('      address: remainingForOthers > 400 ? Math.min(Math.max(stats.maxAddressLength * charWidth + padding, 50), 80) : 50,')
        html.append('      value: remainingForOthers > 400 ? Math.min(Math.max(stats.maxValueLength * charWidth + padding, 80), 200) : 80')
        html.append('    };')
        html.append('    ')
        html.append('    // 重新計算實際使用的空間')
        html.append('    const actualUsed = widths.time + widths.author + widths.worksheet + widths.address + (widths.value * 2);')
        html.append('    const actualRemaining = availableWidth - actualUsed;')
        html.append('    ')
        html.append('    // Formula 欄位平分剩餘空間，但不少於最小值')
        html.append('    const calculatedFormulaWidth = Math.floor(actualRemaining / 3);')
        html.append('    widths.formula = Math.max(calculatedFormulaWidth, minFormulaWidth);')
        html.append('    // Force equal widths inside each group')
        html.append('    widths.valueOld = widths.value;')
        html.append('    widths.valueNew = widths.value;')
        html.append('    widths.valueDiff = widths.value;')
        html.append('    widths.formulaOld = widths.formula;')
        html.append('    widths.formulaNew = widths.formula;')
        html.append('    widths.formulaDiff = widths.formula;')
        html.append('    ')
        html.append('    // 最終保護：如果計算出的 formula 寬度太小，強制壓縮其他欄位')
        html.append('    if (widths.formula < minFormulaWidth) {')
        html.append('      // 極端情況：強制給 formula 最小空間，其他欄位用最小值')
        html.append('      widths.time = 100;')
        html.append('      widths.author = 50;')
        html.append('      widths.worksheet = 50;')
        html.append('      widths.address = 40;')
        html.append('      widths.value = 60;')
        html.append('      widths.formula = minFormulaWidth;')
        html.append('      console.warn("極小螢幕模式：強制壓縮其他欄位以保證 formula 空間");')
        html.append('    }')
        html.append('    ')
        html.append('    console.log("Width calculation:", {')
        html.append('      availableWidth: availableWidth,')
        html.append('      actualUsed: actualUsed,')
        html.append('      formulaWidth: widths.formula,')
        html.append('      totalFormulaSpace: widths.formula * 3,')
        html.append('      guaranteedEqual: "三個 formula 欄位寬度相等"')
        html.append('    });')
        html.append('    ')
        html.append('    return widths;')
        html.append('  }')
        html.append('  ')
        html.append('  // 應用動態寬度到表格')
        html.append('  function applyDynamicWidths(evts) {')
        html.append('    const widths = calculateOptimalWidths(evts);')
        html.append('    ')
        html.append('    // 創建 CSS 規則')
        html.append('    const style = document.createElement("style");')
        html.append('    style.textContent = ')
        html.append('      ".diff-table .col-time { width: " + widths.time + "px !important; }" +')
        html.append('      ".diff-table .col-author { width: " + widths.author + "px !important; }" +')
        html.append('      ".diff-table .col-worksheet { width: " + widths.worksheet + "px !important; }" +')
        html.append('      ".diff-table .col-address { width: " + widths.address + "px !important; }" +')
        html.append('      ".diff-table .col-event { width: 60px !important; }" +')
        html.append('      ".diff-table .col-oldvalue, .diff-table .col-newvalue, .diff-table .col-valuediff { width: " + widths.value + "px !important; min-width: " + widths.value + "px !important; max-width: " + widths.value + "px !important; }" +')
        html.append('      ".diff-table .col-oldformula, .diff-table .col-newformula, .diff-table .col-formuladiff { width: " + widths.formula + "px !important; min-width: " + widths.formula + "px !important; max-width: " + widths.formula + "px !important; }";')
        html.append('    ')
        html.append('    // 移除舊的動態樣式')
        html.append('    const oldStyle = document.getElementById("dynamic-widths");')
        html.append('    if (oldStyle) oldStyle.remove();')
        html.append('    ')
        html.append('    // 添加新樣式')
        html.append('    style.id = "dynamic-widths";')
        html.append('    document.head.appendChild(style);')
        html.append('    ')
        html.append('    console.log("Applied dynamic widths:", widths);')
        html.append('  }')
        html.append('  ')
        html.append('  function rowDiff(d, timestamp, author){')
        html.append('    timestamp = timestamp || "";')
        html.append('    author = author || "";')
        html.append('    ')
        html.append('    // 計算值差異')
        html.append('    const valueDiff = calculateValueDifference(d.old_value, d.new_value);')
        html.append('    ')
        html.append('    return "<tr>"+')
        html.append('           "<td class=\\\"col-time\\\">"+timestamp+"</td>"+')
        html.append('           "<td class=\\\"col-author\\\">"+author+"</td>"+')
        html.append('           "<td class=\\\"col-worksheet\\\">"+(d.worksheet||"")+"</td>"+')
        html.append('           "<td class=\\\"col-address\\\">"+(d.address||"")+"</td>"+')
        html.append('           "<td class=\\\"col-oldvalue\\\">"+formatValue(d.old_value)+"</td>"+')
        html.append('           "<td class=\\\"col-newvalue\\\">"+formatValue(d.new_value)+"</td>"+')
        html.append('           "<td class=\\\"col-valuediff\\\">"+valueDiff+"</td>"+')
        html.append('           "<td class=\\\"col-oldformula formula-cell\\\">"+formatFormula(d.old_formula)+"</td>"+')
        html.append('           "<td class=\\\"col-newformula formula-cell\\\">"+formatFormula(d.new_formula)+"</td>"+')
        html.append('           "<td class=\\\"col-formuladiff formula-cell\\\">"+formatFormulaDiff(d.old_formula, d.new_formula)+"</td>"+')
        html.append('           "</tr>";')
        html.append('  }')
        html.append('  ')
        html.append('  // 計算值差異')
        html.append('  function calculateValueDifference(oldValue, newValue) {')
        html.append('    // 如果值相同，返回無變化')
        html.append('    if (oldValue === newValue) {')
        html.append('      return `<span style="color: #6c757d; font-style: italic;">無變化</span>`;')
        html.append('    }')
        html.append('    ')
        html.append('    // 嘗試轉換為數字')
        html.append('    const oldNum = parseFloat(oldValue);')
        html.append('    const newNum = parseFloat(newValue);')
        html.append('    ')
        html.append('    if (!isNaN(oldNum) && !isNaN(newNum)) {')
        html.append('      // 數值差異')
        html.append('      const diff = roundTo(newNum - oldNum);')
        html.append('      if (diff > 0) {')
        html.append('        return `<span style="color: #28a745; font-weight: bold;">+${diff}</span>`;')
        html.append('      } else if (diff < 0) {')
        html.append('        return `<span style="color: #dc3545; font-weight: bold;">${diff}</span>`;')
        html.append('      } else {')
        html.append('        return `<span style="color: #6c757d;">0</span>`;')
        html.append('      }')
        html.append('    } else {')
        html.append('      // 文字差異')
        html.append('      return formatTextDiff(String(oldValue || ""), String(newValue || ""));')
        html.append('    }')
        html.append('  }')
        html.append('  function viewByTime(){')
        html.append('    let s="<h4>依事件時間</h4>";')
        html.append('    evts.forEach(e=>{')
        html.append('      s+="<div style=\\"margin:6px 0;padding:6px;border:1px solid #ddd\\">";')
        html.append('      s+="<div><b>事件#"+(e.event_number||"")+"</b> | "+e.timestamp+" | 變更數 "+(e.changes||"")+" | "+(e.author||"")+"</div>";')
        html.append('      const diffs=e.diffs||[];')
        html.append('      if(diffs.length){')
        html.append('        s+="<table style=\\"margin-top:4px\\" class=\\"diff-table\\"><thead><tr>"+')
        html.append('          "<th class=\\"col-time\\">時間</th>"+')
        html.append('          "<th class=\\"col-author\\">作者</th>"+')
        html.append('          "<th class=\\"col-worksheet\\">工作表</th>"+')
        html.append('          "<th class=\\"col-address\\">位置</th>"+')
        html.append('          "<th class=\\"col-oldvalue\\">原始值</th>"+')
        html.append('          "<th class=\\"col-newvalue\\">變更後值</th>"+')
        html.append('          "<th class=\\"col-valuediff\\">值差異</th>"+')
        html.append('          "<th class=\\\"col-oldformula\\\">原始公式</th>"+')
        html.append('          "<th class=\\\"col-newformula\\\">變更後公式</th>"+')
        html.append('          "<th class=\\\"col-formuladiff\\\">公式差異比較</th>"+')
        html.append('          "</tr></thead><tbody>";')
        html.append('        diffs.forEach(d=>{s+=rowDiff(d, e.timestamp, e.author)});')
        html.append('        s+="</tbody></table>";')
        html.append('      }else{ s+="<div class=muted>(無精簡差異，請開 per-event)</div>"; }')
        html.append('      s+="</div>";')
        html.append('    });')
        html.append('    fileView.innerHTML=html+s;')
        html.append('    // 應用動態寬度')
        html.append('    applyDynamicWidths(evts);')
        html.append('    document.getElementById("byTime").onclick=viewByTime;')
        html.append('    document.getElementById("byAddr").onclick=viewByAddr;')
        html.append('    document.getElementById("byAuthor").onclick=viewByAuthor;')
        html.append('    document.getElementById("exportCSV").onclick=exportToCSV;')
        html.append('    setupControlEvents();')
        html.append('  }')
        html.append('  function viewByAddr(){')
        html.append('    try {')
        html.append('      console.log("viewByAddr function called");')
        html.append('      let s="<h4>依 Address</h4>";')
        html.append('      const bag={};')
        html.append('    evts.forEach(e => {')
        html.append('      (e.diffs || []).forEach(d => {')
        html.append('        const k = (d.address || "") + "@" + (d.worksheet || "");')
        html.append('        (bag[k] || (bag[k] = [])).push({')
        html.append('          evt: e.event_number,')
        html.append('          ts: e.timestamp,')
        html.append('          author: e.author,')
        html.append('          worksheet: d.worksheet,')
        html.append('          address: d.address,')
        html.append('          old: d.old_value,')
        html.append('          new: d.new_value,')
        html.append('          old_formula: d.old_formula,')
        html.append('          new_formula: d.new_formula')
        html.append('        });')
        html.append('      });')
        html.append('    });')
        html.append('    const keys=Object.keys(bag).sort();')
        html.append('    keys.forEach(k=>{ ')
        html.append('      // 解析地址和工作表')
        html.append('      const parts = k.split("@");')
        html.append('      const address = parts[0] || "";')
        html.append('      const sheet = parts[1] || "";')
        html.append('      s+="<div style=\\"margin:6px 0;padding:6px;border:1px solid #ddd\\"><div><b>地址: "+address+"</b> <span class=\\"muted\\">(工作表: "+sheet+")</span></div>";')
        html.append('      s+="<table style=\\"margin-top:4px\\" class=\\"diff-table\\"><thead><tr>"+')
        html.append('        "<th class=\\"col-event\\">事件#</th>"+')
        html.append('        "<th class=\\"col-time\\">時間</th>"+')
        html.append('        "<th class=\\"col-author\\">作者</th>"+')
        html.append('        "<th class=\\"col-worksheet\\">工作表</th>"+')
        html.append('        "<th class=\\"col-address\\">位置</th>"+')
        html.append('        "<th class=\\"col-oldvalue\\">原始值</th>"+')
        html.append('        "<th class=\\"col-newvalue\\">變更後值</th>"+')
        html.append('        "<th class=\\"col-valuediff\\">值差異</th>"+')
        html.append('        "<th class=\\\"col-oldformula\\\">原始公式</th>"+')
        html.append('        "<th class=\\\"col-newformula\\\">變更後公式</th>"+')
        html.append('        "<th class=\\\"col-formuladiff\\\">公式差異比較</th>"+')
        html.append('        "</tr></thead><tbody>";')
        html.append('      bag[k].sort((a,b)=> (a.ts<b.ts?1:-1)).forEach(r=>{ s+="<tr>"+')
        html.append('        "<td class=\\\"col-event\\\">"+(r.evt||"")+"</td>"+')
        html.append('        "<td class=\\\"col-time\\\">"+r.ts+"</td>"+')
        html.append('        "<td class=\\\"col-author author-cell\\\">"+(r.author||"")+"</td>"+')
        html.append('        "<td class=\\\"col-worksheet\\\">"+(r.worksheet||"")+"</td>"+')
        html.append('        "<td class=\\\"col-address\\\">"+(r.address||"")+"</td>"+')
        html.append('        "<td class=\\\"col-oldvalue\\\">"+formatValue(r.old)+"</td>"+')
        html.append('        "<td class=\\\"col-newvalue\\\">"+formatValue(r.new)+"</td>"+')
        html.append('        "<td class=\\\"col-valuediff\\\">"+calculateValueDifference(r.old, r.new)+"</td>"+')
        html.append('        "<td class=\\\"col-oldformula formula-cell\\\">"+formatFormula(r.old_formula)+"</td>"+')
        html.append('        "<td class=\\\"col-newformula formula-cell\\\">"+formatFormula(r.new_formula)+"</td>"+')
        html.append('        "<td class=\\\"col-formuladiff formula-cell\\\">"+formatFormulaDiff(r.old_formula, r.new_formula)+"</td>"+')
        html.append('        "</tr>"; });')
        html.append('      s+="</tbody></table></div>";')
        html.append('    });')
        html.append('    fileView.innerHTML=html+s;')
        html.append('    // 應用動態寬度')
        html.append('    applyDynamicWidths(evts);')
        html.append('    document.getElementById("byTime").onclick=viewByTime;')
        html.append('    document.getElementById("byAddr").onclick=viewByAddr;')
        html.append('    document.getElementById("byAuthor").onclick=viewByAuthor;')
        html.append('    document.getElementById("exportCSV").onclick=exportToCSV;')
        html.append('    setupControlEvents();')
        html.append('    } catch (e) {')
        html.append('      console.error("viewByAddr function error:", e);')
        html.append('      alert("Address 視圖發生錯誤: " + e.message);')
        html.append('    }')
        html.append('  }')
        html.append('  function viewByAuthor(){')
        html.append('    let s="<h4>依作者</h4>";')
        html.append('    const authorBag = {};')
        html.append('    evts.forEach(e => {')
        html.append('      const author = e.author || "未知";')
        html.append('      if (!authorBag[author]) authorBag[author] = [];')
        html.append('      authorBag[author].push(e);')
        html.append('    });')
        html.append('    const authorList = Object.keys(authorBag).sort();')
        html.append('    authorList.forEach(author => {')
        html.append('      const authorEvents = authorBag[author];')
        html.append('      s += "<div style=\\"margin:10px 0;padding:10px;border:1px solid #ddd\\"><h4>" + author + " (" + authorEvents.length + " 次變更)</h4>";')
        html.append('      authorEvents.sort((a,b) => a.timestamp < b.timestamp ? 1 : -1);')
        html.append('      authorEvents.forEach(e => {')
        html.append('        s += "<div style=\\"margin:6px 0;padding:6px;border:1px solid #eee\\">";')
        html.append('        s += "<div><b>事件#" + (e.event_number || "") + "</b> | " + e.timestamp + " | 變更數 " + (e.changes || "") + "</div>";')
        html.append('        // 記錄作者和時間，以便在顯示時使用')
        html.append('        const author = e.author || "";')
        html.append('        const timestamp = e.timestamp || "";')
        html.append('        const diffs = e.diffs || [];')
        html.append('        if(diffs.length) {')
        html.append('          s += "<table style=\\"margin-top:4px\\" class=\\"diff-table\\"><thead><tr>" +')
        html.append('                "<th class=\\"col-time\\">時間</th>" +')
        html.append('                "<th class=\\"col-author\\">作者</th>" +')
        html.append('                "<th class=\\"col-worksheet\\">工作表</th>" +')
        html.append('                "<th class=\\"col-address\\">位置</th>" +')
        html.append('                "<th class=\\"col-oldvalue\\">原始值</th>" +')
        html.append('                "<th class=\\"col-newvalue\\">變更後值</th>" +')
        html.append('                "<th class=\\"col-valuediff\\">值差異</th>" +')
        html.append('                "<th class=\\\"col-oldformula\\\">原始公式</th>" +')
        html.append('                "<th class=\\\"col-newformula\\\">變更後公式</th>" +')
        html.append('                "<th class=\\\"col-formuladiff\\\">公式差異比較</th>" +')
        html.append('                "</tr></thead><tbody>";')
        html.append('          diffs.forEach(d => { s += rowDiff(d, timestamp, author); });')
        html.append('          s += "</tbody></table>";')
        html.append('        } else {')
        html.append('          s += "<div class=muted>(無精簡差異，請開 per-event)</div>";')
        html.append('        }')
        html.append('        s += "</div>";')
        html.append('      });')
        html.append('      s += "</div>";')
        html.append('    });')
        html.append('    fileView.innerHTML = html + s;')
        html.append('    // 應用動態寬度')
        html.append('    applyDynamicWidths(evts);')
        html.append('    document.getElementById("byTime").onclick = viewByTime;')
        html.append('    document.getElementById("byAddr").onclick = viewByAddr;')
        html.append('    document.getElementById("byAuthor").onclick = viewByAuthor;')
        html.append('    document.getElementById("exportCSV").onclick = exportToCSV;')
        html.append('    setupControlEvents();')
        html.append('  }')
        html.append('  // 更新摘要信息')
        html.append('  function updateSummary() {')
        html.append('    const summaryDiv = document.getElementById("summary");')
        html.append('    if (summaryDiv) {  // 檢查元素是否存在')
        html.append('      summaryDiv.innerHTML = "<b>摘要信息：</b> " +')
        html.append('        "<span>記錄期間：" + earliestTime + " 至 " + latestTime + "</span>, " +')
        html.append('        "<span>總變更數：" + totalChanges + "</span>, " +')
        html.append('        "<span>作者數：" + allAuthors.size + "</span>, " +')
        html.append('        "<span>工作表數：" + allWorksheets.size + "</span>";')
        html.append('    }')
        html.append('  }')
        html.append('  // 更新作者篩選和工作表篩選')
        html.append('  function updateFilters() {')
        html.append('    updateAuthorFilter();')
        html.append('    updateWorksheetFilter();')
        html.append('  }')
        html.append('  ')
        html.append('  // 更新作者篩選')
        html.append('  function updateAuthorFilter() {')
        html.append('    const filterDiv = document.getElementById("authorFilter");')
        html.append('    if (filterDiv) {  // 檢查元素是否存在')
        html.append('      let filterHtml = "<div><b>作者篩選：</b> ";')
        html.append('      filterHtml += "<span class=\\"author-tag author-all\\" data-author=\\"all\\">所有作者</span> ";')
        html.append('      allAuthors.forEach(author => {')
        html.append('        filterHtml += "<span class=\\"author-tag\\" data-author=\\"" + author + "\\">" + author + "</span> ";')
        html.append('      });')
        html.append('      filterHtml += "</div>";')
        html.append('      filterDiv.innerHTML = filterHtml;')
        html.append('      // 添加點擊事件')
        html.append('      document.querySelectorAll(".author-tag").forEach(tag => {')
        html.append('        tag.addEventListener("click", function() {')
        html.append('          const author = this.getAttribute("data-author");')
        html.append('          highlightAuthor(author);')
        html.append('        });')
        html.append('      });')
        html.append('    }')
        html.append('  }')
        html.append('  ')
        html.append('  // 更新工作表篩選')
        html.append('  function updateWorksheetFilter() {')
        html.append('    const filterDiv = document.getElementById("worksheetFilter");')
        html.append('    if (!filterDiv) return;')
        html.append('    ')
        html.append('    let filterHtml = "<div><b>工作表篩選：</b> ";')
        html.append('    filterHtml += "<span class=\\"worksheet-tag worksheet-all\\" data-worksheet=\\"all\\">所有工作表</span> ";')
        html.append('    allWorksheets.forEach(ws => {')
        html.append('      filterHtml += "<span class=\\"worksheet-tag\\" data-worksheet=\\"" + ws + "\\">" + ws + "</span> ";')
        html.append('    });')
        html.append('    filterHtml += "</div>";')
        html.append('    filterDiv.innerHTML = filterHtml;')
        html.append('    ')
        html.append('    // 添加點擊事件')
        html.append('    document.querySelectorAll(".worksheet-tag").forEach(tag => {')
        html.append('      tag.addEventListener("click", function() {')
        html.append('        const ws = this.getAttribute("data-worksheet");')
        html.append('        filterWorksheet(ws);')
        html.append('      });')
        html.append('    });')
        html.append('    ')
        html.append('    // 預設選中"所有工作表"')
        html.append('    const allTag = document.querySelector(".worksheet-tag.worksheet-all");')
        html.append('    if (allTag) {')
        html.append('      allTag.style.fontWeight = "bold";')
        html.append('      allTag.style.backgroundColor = "#bae7ff";')
        html.append('    }')
        html.append('  }')
        html.append('  // 儲存當前篩選狀態')
        html.append('  let currentAuthorFilter = "all";')
        html.append('  let currentWorksheetFilter = null;')
        html.append('  ')
        html.append('  // 高亮特定作者的變更')
        html.append('  function highlightAuthor(author) {')
        html.append('    // 儲存當前作者篩選')
        html.append('    currentAuthorFilter = author;')
        html.append('    ')
        html.append('    // 移除所有作者標籤的選中狀態')
        html.append('    document.querySelectorAll(".author-tag").forEach(tag => {')
        html.append('      tag.style.fontWeight = "normal";')
        html.append('      tag.style.backgroundColor = "#e6f7ff";')
        html.append('    });')
        html.append('    // 高亮選中的作者標籤')
        html.append('    if (author !== "all") {')
        html.append('      const authorTag = document.querySelector(".author-tag[data-author=\\"" + author + "\\"]");')
        html.append('      if (authorTag) {')
        html.append('        authorTag.style.fontWeight = "bold";')
        html.append('        authorTag.style.backgroundColor = "#bae7ff";')
        html.append('      }')
        html.append('    } else {')
        html.append('      const allTag = document.querySelector(".author-tag.author-all");')
        html.append('      if (allTag) {')
        html.append('        allTag.style.fontWeight = "bold";')
        html.append('        allTag.style.backgroundColor = "#bae7ff";')
        html.append('      }')
        html.append('    }')
        html.append('    // 高亮或還原表格中的作者單元格')
        html.append('    document.querySelectorAll(".author-cell").forEach(cell => {')
        html.append('      const cellAuthor = cell.textContent;')
        html.append('      cell.parentNode.classList.remove("author-highlight");')
        html.append('      if (author !== "all" && cellAuthor === author) {')
        html.append('        cell.parentNode.classList.add("author-highlight");')
        html.append('      }')
        html.append('    });')
        html.append('  }')
        html.append('  ')
        html.append('  // 篩選特定工作表')
        html.append('  function filterWorksheet(worksheet) {')
        html.append('    // 儲存當前工作表篩選')
        html.append('    currentWorksheetFilter = worksheet === "all" ? null : worksheet;')
        html.append('    ')
        html.append('    // 更新工作表標籤樣式')
        html.append('    document.querySelectorAll(".worksheet-tag").forEach(tag => {')
        html.append('      tag.style.fontWeight = "normal";')
        html.append('      tag.style.backgroundColor = "#e6f7ff";')
        html.append('    });')
        html.append('    ')
        html.append('    // 高亮選中的工作表標籤')
        html.append('    if (worksheet !== "all") {')
        html.append('      const wsTag = document.querySelector(".worksheet-tag[data-worksheet=\\"" + worksheet + "\\"]");')
        html.append('      if (wsTag) {')
        html.append('        wsTag.style.fontWeight = "bold";')
        html.append('        wsTag.style.backgroundColor = "#bae7ff";')
        html.append('      }')
        html.append('    } else {')
        html.append('      const allTag = document.querySelector(".worksheet-tag.worksheet-all");')
        html.append('      if (allTag) {')
        html.append('        allTag.style.fontWeight = "bold";')
        html.append('        allTag.style.backgroundColor = "#bae7ff";')
        html.append('      }')
        html.append('    }')
        html.append('    ')
        html.append('    // 過濾表格行')
        html.append('    if (worksheet === "all") {')
        html.append('      // 顯示所有行')
        html.append('      document.querySelectorAll("#file-view table.diff-table tbody tr").forEach(row => {')
        html.append('        if (!row.classList.contains("filtered-by-author")) {')
        html.append('          row.style.display = "";')
        html.append('        }')
        html.append('      });')
        html.append('    } else {')
        html.append('      // 只顯示符合的工作表')
        html.append('      document.querySelectorAll("#file-view table.diff-table tbody tr").forEach(row => {')
        html.append('        const wsCell = row.querySelector(".col-worksheet");')
        html.append('        if (wsCell) {')
        html.append('          const cellWs = wsCell.textContent;')
        html.append('          if (cellWs === worksheet) {')
        html.append('            if (!row.classList.contains("filtered-by-author")) {')
        html.append('              row.style.display = "";')
        html.append('            }')
        html.append('          } else {')
        html.append('            row.style.display = "none";')
        html.append('          }')
        html.append('        }')
        html.append('      });')
        html.append('    }')
        html.append('  }')
        html.append('  // 設置列顯示控制')
        html.append('  function setupControlEvents() {')
        html.append('    try {')
        html.append('      // 欄位顯示控制')
        html.append('      const checkboxes = document.querySelectorAll(".col-toggle");')
        html.append('      if (checkboxes && checkboxes.length > 0) {')
        html.append('        checkboxes.forEach(checkbox => {')
        html.append('          if (checkbox) {')
        html.append('            checkbox.addEventListener("change", function() {')
        html.append('              const colClass = "col-" + this.getAttribute("data-col");')
        html.append('              const display = this.checked ? "" : "none";')
        html.append('              document.querySelectorAll("." + colClass).forEach(cell => {')
        html.append('                if (cell) cell.style.display = display;')
        html.append('              });')
        html.append('            });')
        html.append('          }')
        html.append('        });')
        html.append('      }')
        html.append('      ')
        html.append('      // 自適應列寬度控制')
        html.append('      const autoSizeCheckbox = document.getElementById("autoSizeColumns");')
        html.append('      if (autoSizeCheckbox) {')
        html.append('        autoSizeCheckbox.addEventListener("change", function() {')
        html.append('          const tables = document.querySelectorAll("#file-view table.diff-table");')
        html.append('          tables.forEach(table => {')
        html.append('            if (this.checked) {')
        html.append('              table.classList.add("auto-size-columns");')
        html.append('            } else {')
        html.append('              table.classList.remove("auto-size-columns");')
        html.append('            }')
        html.append('          });')
        html.append('        });')
        html.append('        // 初始狀態')
        html.append('        const tables = document.querySelectorAll("#file-view table.diff-table");')
        html.append('        tables.forEach(table => {')
        html.append('          if (autoSizeCheckbox.checked) {')
        html.append('            table.classList.add("auto-size-columns");')
        html.append('          } else {')
        html.append('            table.classList.remove("auto-size-columns");')
        html.append('          }')
        html.append('        });')
        html.append('      }')
        html.append('    } catch (e) {')
        html.append('      console.error("設置控制事件時出錯:", e);')
        html.append('    }')
        html.append('  }')
        html.append('  // 匯出到CSV')
        html.append('  function exportToCSV() {')
        html.append('    try {')
        html.append('      console.log("開始匯出CSV...");')
        html.append('      let csvContent = "\\uFEFF"; // UTF-8 BOM for Excel')
        html.append('      // 標題行')
        html.append('      csvContent += "時間,事件#,作者,工作表,位置,原始值,變更後值,原始公式,變更後公式,公式差異比較\\r\\n";')
        html.append('      ')
        html.append('      // 取得當前可見的表格')
        html.append('      console.log("查找表格內容...");')
        html.append('      const fileView = document.getElementById("file-view");')
        html.append('      if (!fileView) {')
        html.append('        console.log("找不到file-view元素");')
        html.append('        alert("找不到檔案視圖元素，請先點擊檔案名稱查看詳情");')
        html.append('        return;')
        html.append('      }')
        html.append('      // 使用更寬鬆的選擇器')
        html.append('      const tableRows = fileView.querySelectorAll("table tbody tr");')
        html.append('      ')
        html.append('      // 如果當前有表格顯示，匯出表格內容')
        html.append('      console.log("找到表格行: " + (tableRows ? tableRows.length : 0));')
        html.append('      // 調試：查看表格行的可見性')
        html.append('      if (tableRows && tableRows.length > 0) {')
        html.append('        console.log("表格行詳情:");')
        html.append('        Array.from(tableRows).slice(0, 3).forEach((row, idx) => {')
        html.append('          console.log("  行 " + idx + ": display=" + row.style.display + ", visibility=" + row.style.visibility + ", 內容長度=" + row.innerHTML.length);')
        html.append('        });')
        html.append('        // 從當前顯示的表格匯出')
        html.append('        tableRows.forEach(row => {')
        html.append('          // 檢查此行是否被篩選隱藏')
        html.append('          console.log("處理行: display=" + row.style.display + ", visibility=" + row.style.visibility);')
        html.append('          if (row.style.display !== "none") {')
        html.append('            const cells = row.querySelectorAll("td");')
        html.append('            if (cells.length >= 4) {')
        html.append('              // 依視圖不同，可能是時間視圖或地址視圖或作者視圖')
        html.append('              // 嘗試找到相應欄位')
        html.append('              let time = "", eventNum = "", author = "", worksheet = "", address = "", oldValue = "", newValue = "", oldFormula = "", newFormula = "";')
        html.append('              ')
        html.append('              // 檢查視圖類型並獲取正確的欄位')
        html.append('              if (row.querySelector(".col-event")) {  // 時間視圖')
        html.append('                eventNum = cells[0].textContent || "";')
        html.append('                time = cells[1].textContent || "";')
        html.append('                author = cells[2].textContent || "";')
        html.append('                oldValue = cells[3].textContent || "";')
        html.append('                newValue = cells[4].textContent || "";')
        html.append('                oldFormula = cells[5].textContent || "";')
        html.append('                newFormula = cells[6].textContent || "";')
        html.append('              } else if (row.querySelector(".col-worksheet")) {  // 地址視圖')
        html.append('                worksheet = cells[0].textContent || "";')
        html.append('                address = cells[1].textContent || "";')
        html.append('                oldValue = cells[2].textContent || "";')
        html.append('                newValue = cells[3].textContent || "";')
        html.append('                oldFormula = cells[4].textContent || "";')
        html.append('                newFormula = cells[5].textContent || "";')
        html.append('                // 從頁面獲取當前文件信息')
        html.append('                const fileInfoDiv = document.querySelector("#file-view div b:first-child").parentNode;')
        html.append('                if (fileInfoDiv) {')
        html.append('                  author = currentAuthorFilter !== "all" ? currentAuthorFilter : "";')
        html.append('                }')
        html.append('              }')
        html.append('              ')
        html.append('              // 將所有值處理為CSV格式')
        html.append('              time = time.replace(/,/g, " ");')
        html.append('              eventNum = eventNum.replace(/,/g, " ");')
        html.append('              author = author.replace(/,/g, " ");')
        html.append('              worksheet = worksheet.replace(/,/g, " ");')
        html.append('              address = address.replace(/,/g, " ");')
        html.append('              oldValue = oldValue.replace(/"/g, "\\\""); // 轉義雙引號')
        html.append('              newValue = newValue.replace(/"/g, "\\\"");')
        html.append('              oldFormula = oldFormula.replace(/"/g, "\\\"");')
        html.append('              newFormula = newFormula.replace(/"/g, "\\\"");')
        html.append('              ')
        html.append('              // 添加到CSV')
        html.append('              csvContent += `${time},${eventNum},${author},${worksheet},${address},"${oldValue}","${newValue}","${oldFormula}","${newFormula}"\\r\\n`;')
        html.append('            }')
        html.append('          }')
        html.append('        });')
        html.append('      } else if (evts && evts.length) {')
        html.append('        // 如果沒有顯示表格但有事件數據，則匯出所有事件')
        html.append('        const filteredEvts = currentWorksheetFilter ? ')
        html.append('          evts.map(e => {')
        html.append('            const filteredDiffs = (e.diffs || []).filter(d => d.worksheet === currentWorksheetFilter);')
        html.append('            return {...e, diffs: filteredDiffs};')
        html.append('          }).filter(e => e.diffs && e.diffs.length > 0) : evts;')
        html.append('        ')
        html.append('        filteredEvts.forEach(e => {')
        html.append('          const diffs = e.diffs || [];')
        html.append('          if(diffs.length) {')
        html.append('            diffs.forEach(d => {')
        html.append('              // 檢查是否應該包含此工作表')
        html.append('              if (!currentWorksheetFilter || d.worksheet === currentWorksheetFilter) {')
        html.append('                let oldVal = formatValue(d.old_value || "").replace(/"/g, "\\\"");')
        html.append('                let newVal = formatValue(d.new_value || "").replace(/"/g, "\\\"");')
        html.append('                let oldForm = JSON.stringify(d.old_formula || "").replace(/"/g, "\\\"");')
        html.append('                let newForm = JSON.stringify(d.new_formula || "").replace(/"/g, "\\\"");')
        html.append('                let diffForm = formatFormulaDiff(d.old_formula, d.new_formula).replace(/<[^>]*>/g, "").replace(/"/g, "\\\"");')
        html.append('                csvContent += (e.timestamp || "") + "," + (e.event_number || "") + "," + (e.author || "") + "," + (d.worksheet || "") + "," + (d.address || "") + ",\\"" + oldVal + "\\",\\"" + newVal + "\\",\\"" + oldForm + "\\",\\"" + newForm + "\\",\\"" + diffForm + "\\"\\r\\n";')
        html.append('              }')
        html.append('            });')
        html.append('          }')
        html.append('        });')
        html.append('      }')
        html.append('      ')
        html.append('      // 檢查是否有內容')
        html.append('      const headerLength = "\\uFEFF時間,事件#,作者,工作表,位置,原始值,變更後值,原始公式,變更後公式,公式差異比較\\r\\n".length;')
        html.append('      console.log("CSV內容長度: " + csvContent.length + ", 標題長度: " + headerLength);')
        html.append('      if (csvContent.length <= headerLength) {')
        html.append('        alert("沒有資料可匯出。請確保有資料顯示在頁面上。");')
        html.append('        return;')
        html.append('      }')
        html.append('      ')
        html.append('      // 創建下載連結')
        html.append('      const encodedUri = encodeURI("data:text/csv;charset=utf-8," + csvContent);')
        html.append('      const link = document.createElement("a");')
        html.append('      link.setAttribute("href", encodedUri);')
        html.append('      link.setAttribute("download", "excel_timeline_export_" + new Date().toISOString().replace(/[:.]/g, "-") + ".csv");')
        html.append('      document.body.appendChild(link);')
        html.append('      link.click();')
        html.append('      document.body.removeChild(link);')
        html.append('    } catch (e) {')
        html.append('      console.error("匯出CSV時出錯:", e);')
        html.append('      alert("匯出CSV時出錯: " + e.message);')
        html.append('    }')
        html.append('  }')
        html.append('  // 初始化視圖')
        html.append('  updateSummary();')
        html.append('  updateFilters();')
        html.append('  viewByTime();')
        html.append('  // 綁定欄寬控制')
        html.append('  const apply = document.getElementById("applyWidths");')
        html.append('  const reset = document.getElementById("resetWidths");')
        html.append('  const valInput = document.getElementById("valWidth");')
        html.append('  const formInput = document.getElementById("formWidth");')
        html.append('  const VAL_KEY = "timeline_valWidth";')
        html.append('  const FORM_KEY = "timeline_formWidth";')
        html.append('  function setUserWidthsCSS(v, f, t, a, w, addr){')
        html.append('    let css = "";')
        html.append('    if (!Number.isNaN(v)) {')
        html.append('      css += ".diff-table .col-oldvalue, .diff-table .col-newvalue, .diff-table .col-valuediff{width:"+v+"px !important;min-width:"+v+"px !important;max-width:"+v+"px !important;}";')
        html.append('    }')
        html.append('    if (!Number.isNaN(f)) {')
        html.append('      css += ".diff-table .col-oldformula, .diff-table .col-newformula, .diff-table .col-formuladiff{width:"+f+"px !important;min-width:"+f+"px !important;max-width:"+f+"px !important;}";')
        html.append('    }')
        html.append('    if (!Number.isNaN(t)) { css += ".diff-table .col-time{width:"+t+"px !important;min-width:"+t+"px !important;max-width:"+t+"px !important;}"; }')
        html.append('    if (!Number.isNaN(a)) { css += ".diff-table .col-author{width:"+a+"px !important;min-width:"+a+"px !important;max-width:"+a+"px !important;}"; }')
        html.append('    if (!Number.isNaN(w)) { css += ".diff-table .col-worksheet{width:"+w+"px !important;min-width:"+w+"px !important;max-width:"+w+"px !important;}"; }')
        html.append('    if (!Number.isNaN(addr)) { css += ".diff-table .col-address{width:"+addr+"px !important;min-width:"+addr+"px !important;max-width:"+addr+"px !important;}"; }')
        html.append('    const ov = document.getElementById("user-widths"); if (ov) ov.remove();')
        html.append('    if (css){ const s=document.createElement("style"); s.id="user-widths"; s.textContent=css; document.head.appendChild(s);}')
        html.append('  }')
        html.append('  // 初始化：讀取 localStorage 並套用')
        html.append('  try {')
        html.append('    const sv = parseInt(localStorage.getItem(VAL_KEY)||""), sf = parseInt(localStorage.getItem(FORM_KEY)||"");')
        html.append('    const st = parseInt(localStorage.getItem("timeline_timeWidth")||""), sa = parseInt(localStorage.getItem("timeline_authorWidth")||""), sw = parseInt(localStorage.getItem("timeline_wsWidth")||""), sadd = parseInt(localStorage.getItem("timeline_addrWidth")||"");')
        html.append('    if (!Number.isNaN(st)) { const el=document.getElementById("timeWidth"); if (el) el.value = st; }')
        html.append('    if (!Number.isNaN(sa)) { const el=document.getElementById("authorWidth"); if (el) el.value = sa; }')
        html.append('    if (!Number.isNaN(sw)) { const el=document.getElementById("wsWidth"); if (el) el.value = sw; }')
        html.append('    if (!Number.isNaN(sadd)) { const el=document.getElementById("addrWidth"); if (el) el.value = sadd; }')
        html.append('    if (!Number.isNaN(st) || !Number.isNaN(sa) || !Number.isNaN(sw) || !Number.isNaN(sadd)) setUserWidthsCSS(sv, sf, st, sa, sw, sadd);')
        html.append('    if (!Number.isNaN(sv) && valInput) valInput.value = sv;')
        html.append('    if (!Number.isNaN(sf) && formInput) formInput.value = sf;')
        html.append('    if (!Number.isNaN(sv) || !Number.isNaN(sf)) setUserWidthsCSS(sv, sf);')
        html.append('  } catch(e) { console.warn("[index3] localStorage init warn", e); }')
        html.append('  // 初始化 decimals 控制與事件監聽')
        html.append('  const decInput = document.getElementById("decimals");')
        html.append('  if (decInput) {')
        html.append('    // 載入時從 localStorage 恢復設定')
        html.append('    try { const savedDec = parseInt(localStorage.getItem(DEC_KEY)||""); if(!Number.isNaN(savedDec)) decInput.value = String(savedDec); } catch(e) {}')
        html.append('    // 監聽變更事件')
        html.append('    // 監聽 change 和 keydown 事件')
        html.append('    function handleDecimalsChange() {')
        html.append('      const v = parseInt(decInput.value);')
        html.append('      if (!Number.isNaN(v)) { try { localStorage.setItem(DEC_KEY, String(Math.min(Math.max(v,0),10))); } catch(e){} }')
        html.append('      // 重新渲染當前檔案視圖')
        html.append('      try { const currentFile = document.querySelector("#file-view")?.getAttribute("data-current-file"); if(currentFile) renderFileView(currentFile); } catch(e){}')
        html.append('    }')
        html.append('    ')
        html.append('    decInput.addEventListener("change", handleDecimalsChange);')
        html.append('    decInput.addEventListener("keydown", (e)=>{')
        html.append('      if (e.key === "Enter") {')
        html.append('        e.preventDefault();')
        html.append('        handleDecimalsChange();')
        html.append('      }')
        html.append('    });')
        html.append('  }')
        html.append('  ')
        html.append('  // 為所有寬度輸入框添加 Enter 鍵支援')
        html.append('  function applyWidthSettings() {')
        html.append('    const v = parseInt(valInput?.value);')
        html.append('    const f = parseInt(formInput?.value);')
        html.append('    const t = parseInt(document.getElementById("timeWidth")?.value);')
        html.append('    const a = parseInt(document.getElementById("authorWidth")?.value);')
        html.append('    const w = parseInt(document.getElementById("wsWidth")?.value);')
        html.append('    const addr = parseInt(document.getElementById("addrWidth")?.value);')
        html.append('    setUserWidthsCSS(v, f, t, a, w, addr);')
        html.append('    try { if (!Number.isNaN(v)) localStorage.setItem(VAL_KEY, String(v)); } catch(e){}')
        html.append('    try { if (!Number.isNaN(f)) localStorage.setItem(FORM_KEY, String(f)); } catch(e){}')
        html.append('    try { if (!Number.isNaN(t)) localStorage.setItem("timeline_timeWidth", String(t)); } catch(e){}')
        html.append('    try { if (!Number.isNaN(a)) localStorage.setItem("timeline_authorWidth", String(a)); } catch(e){}')
        html.append('    try { if (!Number.isNaN(w)) localStorage.setItem("timeline_wsWidth", String(w)); } catch(e){}')
        html.append('    try { if (!Number.isNaN(addr)) localStorage.setItem("timeline_addrWidth", String(addr)); } catch(e){}')
        html.append('  }')
        html.append('  ')
        html.append('  // 為所有寬度輸入框添加 Enter 鍵監聽器')
        html.append('  const widthInputs = ["valWidth", "formWidth", "timeWidth", "authorWidth", "wsWidth", "addrWidth"];')
        html.append('  widthInputs.forEach(inputId => {')
        html.append('    const input = document.getElementById(inputId);')
        html.append('    if (input) {')
        html.append('      input.addEventListener("keydown", (e) => {')
        html.append('        if (e.key === "Enter") {')
        html.append('          e.preventDefault();')
        html.append('          applyWidthSettings();')
        html.append('        }')
        html.append('      });')
        html.append('    }')
        html.append('  });')
        html.append('  ')
        html.append('  if (apply) {')
        html.append('    apply.addEventListener("click", applyWidthSettings);')
        html.append('  }')
        html.append('  if (reset) {')
        html.append('    reset.addEventListener("click", ()=>{')
        html.append('      const ov = document.getElementById("user-widths"); if (ov) ov.remove();')
        html.append('      try { localStorage.removeItem(VAL_KEY); localStorage.removeItem(FORM_KEY); } catch(e){}')
        html.append('    });')
        html.append('  }')
        html.append('  } catch (e) {')
        html.append('    console.error("渲染檔案視圖時出錯:", e);')
        html.append('  }')
        html.append('}')
        html.append("// 初始化頁面")
        html.append("function initializePage() {")
        html.append("  document.querySelectorAll('a.file-link').forEach(a=>{ ")
        html.append("    a.addEventListener('click', function(ev) {")
        html.append("      ev.preventDefault();") 
        html.append("      renderFileView(this.getAttribute('data-file'));")
        html.append("    });")
        html.append("  });")
        html.append("}")
        html.append("")
        html.append("// 確保DOM完全載入")
        html.append("if (document.readyState === 'loading') {")
        html.append("  document.addEventListener('DOMContentLoaded', initializePage);")
        html.append("} else {")
        html.append("  initializePage();")
        html.append("}")
        html.append("document.addEventListener('click', function(ev){")
        html.append("  const a = ev.target.closest('a.file-link');")
        html.append("  if (!a) return;")
        html.append("  ev.preventDefault();")
        html.append("  const f = a.getAttribute('data-file');")
        html.append("  console.debug('[index3] file-link click:', f);")
        html.append("  try { renderFileView(f); } catch (e) { console.error('[index3] renderFileView error:', e); }")
        html.append("});")
        html.append("console.info('[index3] ready. file-link count=', document.querySelectorAll('a.file-link').length);")
        html.append('</script>')
        html.append('</body></html>')
        try:
            # 決定輸出檔案路徑
            final_output_path = output_path or TIMELINE_HTML_MATRIX_CLEAN
            # 確保目錄存在
            os.makedirs(os.path.dirname(final_output_path), exist_ok=True)
            # 寫入檔案
            with open(final_output_path, 'w', encoding='utf-8') as f:
                f.write('\n'.join(html))
            # Debug copy into workspace for analysis
            try:
                with open('tmp_rovodev_index2_debug.html', 'w', encoding='utf-8') as fdbg:
                    fdbg.write('\n'.join(html))
            except Exception:
                pass
            # 輸出成功訊息
            # 總是顯示成功訊息
            print(f"[timeline-matrix-clean] HTML 成功寫入: {final_output_path}")
            if getattr(settings, 'SHOW_DEBUG_MESSAGES', False):
                print(f"[timeline-matrix-clean] HTML 詳細信息已寫入 {final_output_path}")
        except Exception as e:
            if getattr(settings, 'SHOW_DEBUG_MESSAGES', False):
                print(f"[timeline-matrix-clean] 寫入 HTML 失敗: {e}")
    except Exception:
        pass
